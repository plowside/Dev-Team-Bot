# -*- coding: utf- 8 -*-
from typing import Union

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import *
from utils.functions import *
from data.config import *


################################################################################
#################################### –ü–†–û–ß–ï–ï ####################################
# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def kb_back(data: str = 'user:menu', text: str = '‚Ü™ –ù–∞–∑–∞–¥') -> InlineKeyboardMarkup:
	keyboard = ikb_construct(back_button=ikb(text, data=data))
	return keyboard.as_markup()

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
def kb_close(text: str = '‚ùå –ó–∞–∫—Ä—ã—Ç—å') -> InlineKeyboardMarkup:
	keyboard = ikb_construct(back_button=ikb(text, data='utils:delete'))
	return keyboard.as_markup()




def kb_order_choose():
	keyboard = ikb_construct(
		[ikb('‚öôÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', data='req:order:chs:programming'), ikb('üñå –î–∏–∑–∞–π–Ω', data='req:order:chs:design')],
		back_button=ikb('‚ùå –ó–∞–∫—Ä—ã—Ç—å', data='utils:delete')
	)
	return keyboard.as_markup()

def kb_application_choose():
	keyboard = ikb_construct(
		[ikb('‚öôÔ∏è –ö–æ–¥–µ—Ä', data='req:application:chs:coder'), ikb('üñå –î–∏–∑–∞–π–Ω–µ—Ä', data='req:application:chs:designer')],
		back_button=ikb('‚ùå –ó–∞–∫—Ä—ã—Ç—å', data='utils:delete')
	)
	return keyboard.as_markup()


def kb_multi_state(req_type: str, req_sub_type: str, questions: dict, question_key: str, question_data: dict):
	if not question_key:
		keyboard = ikb_construct(
			[ikb('–î–∞', data='True'), ikb('–ù–µ—Ç', data='False')],
			back_button=ikb('‚Ü™ –ù–∞–∑–∞–¥', data='back')
		)
		return keyboard.as_markup()
	elif question_data.get('bool', False):
		keyboard = ikb_construct(
			*[[ikb(z, data=x[z]) for z in x] for x in question_data.get('inline_kb', {})],
			back_button=ikb('‚Ü™ –ù–∞–∑–∞–¥', data='back')
		)
		return keyboard.as_markup()
	elif len(question_data.get('reply_kb', [])) > 0 or (len(question_data.get('reply_kb', [])) > 0 and question_data.get('is_file', False)):
		keyboard = rkb_construct(
			*[[rkb(z) for z in x] for x in question_data.get('reply_kb', [])],
			[rkb('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')] if question_data.get('skipable', False) else [],
			[rkb('‚Ü™ –ù–∞–∑–∞–¥')]
		)
		return keyboard.as_markup(resize_keyboard=True)
	elif len(question_data.get('inline_kb', [])) > 0 or (len(question_data.get('inline_kb', [])) > 0 and question_data.get('is_file', False)):
		keyboard = ikb_construct(
			*[[ikb(z, data=x[z]) for z in x] for x in question_data.get('inline_kb', {})],
			[ikb('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', data='skip')] if question_data.get('skipable', False) else [],
			[ikb('‚Ü™ –ù–∞–∑–∞–¥', data='back')]
		)
		return keyboard.as_markup()
	elif question_data.get('skipable', False):
		keyboard = ikb_construct(
			[ikb('‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', data='skip')],
			back_button=ikb('‚Ü™ –ù–∞–∑–∞–¥', data='back')
		)
		return keyboard.as_markup()
	else:
		keyboard = ikb_construct(
			[ikb('‚Ü™ –ù–∞–∑–∞–¥', data='back')]
		)
		return keyboard.as_markup()



# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
def kb_info() -> InlineKeyboardMarkup:
	keyboard = ikb_construct(
		[ikb('üìç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', url=url_administrator), ikb('üñº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', url=url_portfolio)],
		[ikb('üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', url=url_rules)], 
		[ikb('üìú –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ?', url=url_tz)],
		back_button=ikb('‚ùå –ó–∞–∫—Ä—ã—Ç—å', data='utils:delete')
	)
	return keyboard.as_markup()
################################################################################
################################### –ü–õ–ê–¢–ï–ñ–ò ####################################