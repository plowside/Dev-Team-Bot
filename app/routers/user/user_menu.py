# -*- coding: utf- 8 -*-
import asyncio

from datetime import datetime
from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from data.config import *
from database import *
from utils.functions import *
from keyboards import *
from .. import main_start

router = Router(name=__name__)






################################################################################
################################### MESSAGE ####################################

# –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
@router.message(F.text == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def create_order(message: Message, bot: Bot, state: FSMContext):
	await state.clear()
	await state.set_state('input_create_order')
	
	this_state = 'point_of_work'
	msg = await message.answer('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n–í–æ–ø—Ä–æ—Å: <i>–°—É—Ç—å —Ä–∞–±–æ—Ç—ã (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ)</i>', reply_markup=kb_create_order(this_state))
	await state.update_data(this_state=this_state, msgs=[message, msg])

# –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–¥–µ—Ä–∞\–¥–∏–∑–∞–π–Ω–µ—Ä–∞
@router.message(F.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç—É–¥–∏—é')
async def create_coder(message: Message, bot: Bot, state: FSMContext):
	await state.clear()
	msg = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å', reply_markup=kb_choose_profession())



@router.callback_query(F.data.startswith('user'))
async def callback_user(call: CallbackQuery, bot: Bot, state: FSMContext, custom_data: str = None):
	await state.clear()
	cd = custom_data.split(':') if custom_data else call.data.split(':')

	if cd[1] == 'req':
		if cd[2] == 'menu':
			await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å', reply_markup=kb_choose_profession())

		elif cd[2] == 'coder':
			await state.set_state('input_create_coder')
			this_state = 'age'
			msg = await call.message.edit_text('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–í–æ–∑—Ä–∞—Å—Ç</i>', reply_markup=kb_create_coder(this_state))
			await state.update_data(this_state=this_state, msgs=[msg])

		elif cd[2] == 'designer':
			await state.set_state('input_create_designer')
			this_state = 'age'
			msg = await call.message.edit_text('–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–í–æ–∑—Ä–∞—Å—Ç</i>', reply_markup=kb_create_designer(this_state))
			await state.update_data(this_state=this_state, msgs=[msg])




# –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def faq(message: Message, bot: Bot, state: FSMContext):
	await state.clear()

	await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', disable_web_page_preview=True, reply_markup=kb_info())

################################################################################
################################### CALLBACK ###################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith('user:'))
async def user_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
	cd = call.data.split(':')
	tg_user_id, username, firstname = get_user(call)
	bot_info = await get_bot_info(bot)

	# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if cd[1] == 'menu':
		user = await Userx.get(tg_user_id=tg_user_id)
		user_sub = await UserSubx.get(user_id=user.id)
		
		register_date = datetime.strftime(datetime.fromtimestamp(user.unix), '%d.%m.%Y')
		if user_sub: sub_expiration = f'–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è {time_to_text(user_sub.unix + user_sub.duration - get_unix(), True)}'
		else: sub_expiration = '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
		
		await call.message.edit_text(
			f'\n<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<i>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n\nüîë ID:  <code>{tg_user_id}</code>\nüïú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:  <code>{register_date}</code>\n\nüíµ –ü–æ–¥–ø–∏—Å–∫–∞:  <code>{sub_expiration}</code>\nüí≥ –ë–∞–ª–∞–Ω—Å:  <code>{user.balance} ‚ÇΩ</code>\n\nüéñ –†–∞–Ω–≥:  <code>üåü Elite</code>\nüìû –°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ:  <code>0 –∏–∑ 2</code>\n‚öôÔ∏è –õ–∏–º–∏—Ç –∑–∞–¥–∞—á –≤ —Å—É—Ç–∫–∏:  <code>0 –∏–∑ 30</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:  <code>0 –∏–∑ 2</code>',
			reply_markup=kb_user_menu(tg_user_id)
		)


	# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	elif cd[1] == 'refill':

		# –í—ã–¥–∞—á–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
		if len(cd) == 4:
			refill_amount = parse_num(cd[2])
			if not refill_amount:
				return await call.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ')
			
			refill_service = cd[3]
			if refill_service not in ['crystalpay', 'aaio', 'payok']:
				return await call.answer('–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é')

			status, (refill_id, refill_url) = await refill_create(tg_user_id, refill_amount, refill_service)
			if not status:
				return await call.message.edit_text('‚ùå <b>–ù–µ—É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É</b> ‚ùå', reply_markup=kb_back(f'user:refill:{refill_amount}'))
			
			await call.message.edit_text(f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{refill_amount} ‚ÇΩ</code>\n\n<i>‚ùî –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.</i>\n\n<b>‚ùóÔ∏è –í–ê–ñ–ù–û:</b> <i>–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç—É —Å—É–º–º—É, —á—Ç–æ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã!</i>\n\n<b>‚òπÔ∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –¥–æ—à—ë–ª –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞?</b>\n<i>–ù–∞–ø–∏—à–∏ –Ω–∞–º - {username_support}, –ø—Ä–∏–ª–æ–∂–∏–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.</i>', reply_markup=kb_refill(refill_amount, refill_service, refill_url))
		
		# –í—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
		elif len(cd) == 3:
			refill_amount = parse_num(cd[2])
			if not refill_amount:
				return await call.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ')
			await call.message.edit_text(f'<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n–°—É–º–º–∞:  <code>{refill_amount} ‚ÇΩ</code>\n\n<i>‚ùî –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>', reply_markup=kb_refill(refill_amount))
		
		# –í—ã–±–æ—Ä —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
		elif len(cd) == 2:
			await state.set_state('input_refill_amount')
			msg = await call.message.edit_text('<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n<i>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>', reply_markup=kb_refill())
			await state.update_data(msg=msg)

	elif cd[1] == 'sub_menu':
		user_sub = await UserSubx.get(tg_user_id=tg_user_id)
		if user_sub:
			sub_expiration = date_to_text(user_sub.unix + user_sub.duration)
			sub_duration = time_to_text(user_sub.duration)
			await call.message.edit_text(f'<b>üí† –ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n<i>–ù–∞–∑–≤–∞–Ω–∏–µ:</i> <b>{user_sub.name}</b>\n\n<i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i>  <code>60 –º–∏–Ω—É—Ç</code>\n<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i>  <code>{user_sub.price} ‚ÇΩ</code>\n\n<i>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</i>  <code>{sub_expiration}</code>', reply_markup=await kb_sub())
		else:
			await call.message.edit_text('<b>üíµ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n<i>–î–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ ¬´–û–±—ã—á–Ω–æ–º—É —Ñ–ª—É–¥—É¬ª –∏ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å ¬´–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–ª—É–¥–∞¬ª</i>', reply_markup=await kb_sub(user_sub))

	elif cd[1] == 'sub':
		user_sub = await UserSubx.get(tg_user_id=tg_user_id)
		if len(cd) == 4:
			sub_id = parse_num(cd[2])
			user = await Userx.get(tg_user_id=tg_user_id)
			this_sub = await Subx.get(id=sub_id)
			sub_price = this_sub.price

			if sub_price > user.balance:
				balance_to_up = sub_price - user.balance
				return await call.message.edit_text(f'<b>‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n<i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:  <code>{user.balance} ‚ÇΩ</code>', reply_markup=kb_force_refill(balance_to_up, f'user:sub:{sub_id}'))

			sub = await TxnSubx.buy(user_id=user.id, sub_id=this_sub.id)
			if not sub:
				return await call.answer('‚ùå –í–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ–µ', show_alert=True)

			await call.message.edit_text('–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞', reply_markup=kb_back())
		elif len(cd) == 3:
			sub_id = parse_num(cd[2])
			user = await Userx.get(tg_user_id=tg_user_id)
			this_sub = await Subx.get(id=sub_id)
			sub_price = this_sub.price
			await call.message.edit_text(f'<b>üíµ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n<i>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</i>\n\nüî• –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞  <code>60 –º–∏–Ω—É—Ç</code>\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:  <code>{sub_price} ‚ÇΩ</code>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:  <code>{user.balance} ‚ÇΩ</code>', reply_markup=await kb_sub(user_sub, sub_id))
		elif len(cd) == 2:
			await call.message.edit_text('<b>üíµ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n<i>–î–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ ¬´–û–±—ã—á–Ω–æ–º—É —Ñ–ª—É–¥—É¬ª –∏ —Å–Ω–∏–∂–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å ¬´–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–ª—É–¥–∞¬ª</i>', reply_markup=await kb_sub(user_sub))


	elif cd[1] == 'rank':
		await call.message.edit_text('<b>üéñ –†–∞–Ω–≥–∏</b>\n<i>–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–Ω–≥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–•–æ—á—É —ç—Ç–æ—Ç —Ä–∞–Ω–≥¬ª</i>\n\n¬∑ ‚Ä¢ ‚¶Å  <code>{rank.name}</code>   ‚¶Å ‚Ä¢ ¬∑\n\nüìû –°–ª–æ—Ç–æ–≤:  <code>2 —à—Ç.</code>\n‚öôÔ∏è –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:  <code>30 –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å</code>\nü§ç –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:  <code>2 –Ω–æ–º–µ—Ä–∞</code>\nüí∞ –¶–µ–Ω–∞:  <code>199 ‚ÇΩ</code>\n\n<i>‚ùóÔ∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ä–∞–Ω–≥</i>', reply_markup=kb_rank())


	elif cd[1] == 'coupon':
		await call.answer('coupon')


	# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
	elif cd[1] == 'referral':
		referral_all = 0 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
		referral_active = 0 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
		referral_profit = 0 # –ü—Ä–æ—Ñ–∏—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
		await call.message.edit_text(
			f'<b>üíô –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üíô</b>\n\n<b>üîó –°—Å—ã–ª–∫–∞:</b>\n<code>t.me/{bot_info.username}?start=ref_{tg_user_id}</code>\n<i>üìò –ù–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –¥–∞–≤–∞—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ <code>{int(referral_percent*100)}%</code> —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ</i>\n\nüíô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{referral_all}</code>\nüíô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{referral_active}</code>\nüõç –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:  <code>{referral_profit} —Ä—É–±</code>',
			disable_web_page_preview=True,
			reply_markup=kb_back()
		)
	elif cd[1] == 'terms':
		await call.message.edit_text(
			f'<b>‚öñÔ∏è –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 22 —Ñ–µ–≤—Ä–∞–ª—è 2024</i>\n\n–°–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –≤ –¥–æ—Å—Ç–∞–≤–∫–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–≤–æ–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å—ã –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø—É–±–ª–∏—á–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü, –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ SMS –∏ –∑–≤–æ–Ω–∫–æ–≤ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ –∏—Å–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —É –í–∞—Å –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è SMS —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–≤–æ–Ω–∫–æ–≤. –†–∞–±–æ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤–µ–¥–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –æ—Ç 27 –∏—é–ª—è 2006 –≥–æ–¥–∞, ‚Ññ 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª, –§–ó ‚Ññ126 ¬´–û —Å–≤—è–∑–∏¬ª –æ—Ç 07.07.2003 –≥–æ–¥–∞ (–ø–æ–ø—Ä–∞–≤–∫–∏ –æ—Ç 21.07.2014 –≥–æ–¥–∞), –§–ó ‚Ññ38 ¬´–û —Ä–µ–∫–ª–∞–º–µ¬ª –æ—Ç 13.03.2006 –≥–æ–¥–∞, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–≥–ª–∞—Å–∏—è —Å—É–±—ä–µ–∫—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n–í—ã–ø–æ–ª–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫—É SMS –∏ –∑–≤–æ–Ω–∫–æ–≤, –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ <a href="https://telegra.ph/personal-data-02-08">–ü–æ–ª–∏—Ç–∏–∫—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a> –∏ <a href="https://telegra.ph/terms-of-use-02-08">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>.',
			disable_web_page_preview=True,
			reply_markup=kb_terms()
		)


@router.callback_query(F.data.startswith('faq:'))
async def faq_callback(call: CallbackQuery, bot: Bot, state: FSMContext):
	cd = call.data.split(':')
	
	faq_item_key = cd[1]
	faq_item = faq_text.get(faq_item_key)
	if not faq_item:
		await call.answer('‚ô¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å', show_alert=True)
		faq_item = faq_text.items()[0]
		faq_item_key = faq_item[0]
		faq_item = faq_item[1]

	await call.message.edit_text(
		f'<b>‚ùì {faq_item["title"]}</b>\n\n{faq_item["content"]}',
		disable_web_page_preview=True,
		reply_markup=kb_faq(faq_item_key)
	)














### –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.message(StateFilter('input_create_order'))
async def state_input_create_order(message: Message, bot: Bot, state: FSMContext, custom_data: str = None):
	mt = custom_data if custom_data else message.text
	state_data = await state.get_data()

	this_state = state_data.get('this_state', 'start')
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])
	
	if this_state == 'start':
		this_state = 'point_of_work'
		msg = await message.answer('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n–í–æ–ø—Ä–æ—Å: <i>–°—É—Ç—å —Ä–∞–±–æ—Ç—ã (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ)</i>', reply_markup=kb_create_order(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'point_of_work':
		this_state = 'deadline'
		answers['point_of_work'] = mt
		msg = await message.answer('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n–í–æ–ø—Ä–æ—Å: <i>–ñ–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</i>', reply_markup=kb_create_order(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'deadline':
		this_state = 'budget'
		answers['deadline'] = mt
		msg = await message.answer('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n–í–æ–ø—Ä–æ—Å: <i>–ë—é–¥–∂–µ—Ç</i>', reply_markup=kb_create_order(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'budget':
		this_state = 'create'
		answers['budget'] = mt
		msg = await message.answer(f'–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\npoint_of_work: {answers["point_of_work"]}\ndeadline: {answers["deadline"]}\nbudget: {answers["budget"]}', reply_markup=kb_create_order(this_state))
		msgs.append(message)
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

@router.callback_query(StateFilter('input_create_order'))
async def state_input_create_order_(call: CallbackQuery, bot: Bot, state: FSMContext):
	cd = call.data.split(':')[1:]
	state_data = await state.get_data()
	tg_user_id, username, firstname = get_user(call)

	this_state = state_data.get('this_state', None)
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])

	if cd[0] == 'cst':
		states = {'point_of_work': 'menu', 'deadline': 'start', 'budget': 'point_of_work'}
		this_state = states.get(cd[1], list(states.values())[0])

		await state.update_data(this_state=this_state)

		if this_state == 'menu':
			await state.clear()
			await main_start.utils(call, bot, state, 'utils:menu:main')
			await del_message(*msgs)

		elif this_state in ['start', 'point_of_work', 'deadline']:
			await del_message(call.message)
			await state_input_create_order(call.message, bot, state, answers.get(this_state, ''))

	elif cd[0] == 'cod' and this_state == 'create':
		await state.clear()
		this_state = 'created'

		if cd[1] == 'y':
			user = await Userx.get(tg_user_id=tg_user_id)
			order = await Orderx.add(user_id=user.id, point_of_work=answers.get('point_of_work', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), deadline=answers.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), budget=answers.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
			if order:
				await call.message.edit_text(f'–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω\nID: {order.id}', reply_markup=kb_create_order(this_state))
			else:
				await call.message.edit_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω', reply_markup=kb_create_order(this_state))
		elif cd[1] == 'n':
			msg = await call.message.edit_text(f'–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_create_order(this_state))
		
		await del_message(*msgs)
	else:
		await del_message(message)




# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫–æ–¥–µ—Ä–∞
@router.message(StateFilter('input_create_coder'))
async def state_input_create_coder(message: Message, bot: Bot, state: FSMContext, custom_data: str = None):
	mt = custom_data if custom_data else message.text
	state_data = await state.get_data()

	this_state = state_data.get('this_state', 'start')
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])
	
	if this_state == 'start':
		this_state = 'age'
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–í–æ–∑—Ä–∞—Å—Ç</i>', reply_markup=kb_create_coder(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'age':
		this_state = 'stack'
		answers['age'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–°—Ç–µ–∫ –Ω–∞–≤—ã–∫–æ–≤</i>', reply_markup=kb_create_coder(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'stack':
		this_state = 'portfolio'
		answers['stack'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ/–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç</i>', reply_markup=kb_create_coder(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'portfolio':
		this_state = 'extra_information'
		answers['portfolio'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>', reply_markup=kb_create_coder(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'extra_information':
		this_state = 'complete_test_task'
		answers['extra_information'] = mt
		await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–ì–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ?</i>', reply_markup=kb_create_coder(this_state))
		msgs.append(message)
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)
	else:
		await del_message(message)
@router.callback_query(StateFilter('input_create_coder'))
async def state_input_create_coder_(call: CallbackQuery, bot: Bot, state: FSMContext):
	cd = call.data.split(':')[1:]
	state_data = await state.get_data()
	tg_user_id, username, firstname = get_user(call)

	this_state = state_data.get('this_state', None)
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])
	print(cd, this_state)

	if cd[0] == 'cst':
		states = {'age': 'menu', 'stack': 'start', 'portfolio': 'age', 'extra_information': 'stack', 'complete_test_task': 'portfolio'}
		this_state = states.get(cd[1], list(states.values())[0])

		await state.update_data(this_state=this_state)

		if this_state == 'menu':
			await state.clear()
			await callback_user(call, bot, state, 'user:req:menu')
			if len(msgs) > 1:
				await del_message(*msgs)

		elif this_state in ['start', 'age', 'stack', 'portfolio']:
			await del_message(call.message)
			await state_input_create_coder(call.message, bot, state, answers.get(this_state, ''))

	elif cd[0] == 'acd':
		if this_state == 'complete_test_task':
			this_state = 'create'
			answers['complete_test_task'] = (cd[1] == 'y')
			await call.message.edit_text(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–¥–µ—Ä–∞\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–¥–µ—Ä–∞:\nage: {answers["age"]}\nstack: {answers["stack"]}\nportfolio: {answers["portfolio"]}\nextra_information: {answers["extra_information"]}\ncomplete_test_task: {"–î–∞" if answers["complete_test_task"] else "–ù–µ—Ç"}', reply_markup=kb_create_coder(this_state))
			await state.update_data(this_state=this_state, answers=answers)

	elif cd[0] == 'cod' and this_state == 'create':
		await state.clear()
		this_state = 'created'

		if cd[1] == 'y':
			user = await Userx.get(tg_user_id=tg_user_id)
			coder = await Coderx.add(user_id=user.id, age=answers.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), stack=answers.get('stack', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), portfolio=answers.get('portfolio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), extra_information=answers.get('extra_information', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), complete_test_task=answers.get('complete_test_task', False))
			if coder:
				await call.message.edit_text(f'–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\nID: {coder.id}', reply_markup=kb_create_coder(this_state))
			else:
				await call.message.edit_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω', reply_markup=kb_create_coder(this_state))
		elif cd[1] == 'n':
			msg = await call.message.edit_text(f'–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_create_coder(this_state))
		
		await del_message(*msgs)




# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞
@router.message(StateFilter('input_create_designer'))
async def state_input_create_designer(message: Message, bot: Bot, state: FSMContext, custom_data: str = None):
	mt = custom_data if custom_data else message.text
	state_data = await state.get_data()

	this_state = state_data.get('this_state', 'start')
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])
	
	if this_state == 'start':
		this_state = 'age'
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–í–æ–∑—Ä–∞—Å—Ç</i>', reply_markup=kb_create_designer(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'age':
		this_state = 'stack'
		answers['age'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</i>', reply_markup=kb_create_designer(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'stack':
		this_state = 'services_provided'
		answers['stack'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ —É—Å–ª—É–≥–∏ (–ù–∞–ø—Ä–∏–º–µ—Ä: 2D/3D/–ê—Ä—Ç—ã/–ê–Ω–∏–º–∞—Ü–∏—è/–°—Ç–∞—Ç–∏–∫–∞ –∏ –ø—Ä–æ—á–µ–µ)</i>', reply_markup=kb_create_designer(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'services_provided':
		this_state = 'extra_information'
		answers['services_provided'] = mt
		msg = await message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–í–æ–ø—Ä–æ—Å: <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>', reply_markup=kb_create_designer(this_state))
		msgs.extend([message, msg])
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)

	elif this_state == 'extra_information':
		this_state = 'create'
		answers['extra_information'] = mt
		await message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–∞:\nage: {answers["age"]}\nstack: {answers["stack"]}\nservices_provided: {answers["services_provided"]}\nextra_information: {answers["extra_information"]}', reply_markup=kb_create_designer(this_state))
		msgs.append(message)
		await state.update_data(this_state=this_state, answers=answers, msgs=msgs)
	else:
		await del_message(message)
@router.callback_query(StateFilter('input_create_designer'))
async def state_input_create_designer_(call: CallbackQuery, bot: Bot, state: FSMContext):
	cd = call.data.split(':')[1:]
	state_data = await state.get_data()
	tg_user_id, username, firstname = get_user(call)

	this_state = state_data.get('this_state', None)
	answers = state_data.get('answers', {})
	msgs = state_data.get('msgs', [])

	if cd[0] == 'cst':
		states = {'age': 'menu', 'stack': 'start', 'services_provided': 'age', 'extra_information': 'stack'}
		this_state = states.get(cd[1], list(states.values())[0])

		await state.update_data(this_state=this_state)

		if this_state == 'menu':
			await state.clear()
			await callback_user(call, bot, state, 'user:req:menu')
			if len(msgs) > 1:
				await del_message(*msgs)

		elif this_state in ['start', 'age', 'stack']:
			await del_message(call.message)
			await state_input_create_designer(call.message, bot, state, answers.get(this_state, ''))

	elif cd[0] == 'cod' and this_state == 'create':
		await state.clear()
		this_state = 'created'

		if cd[1] == 'y':
			user = await Userx.get(tg_user_id=tg_user_id)
			designer = await Designerx.add(user_id=user.id, age=answers.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), stack=answers.get('stack', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), services_provided=answers.get('services_provided', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'), extra_information=answers.get('extra_information', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
			if designer:
				await call.message.edit_text(f'–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\nID: {designer.id}', reply_markup=kb_create_designer(this_state))
			else:
				await call.message.edit_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω', reply_markup=kb_create_designer(this_state))
		elif cd[1] == 'n':
			msg = await call.message.edit_text(f'–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb_create_designer(this_state))
		
		await del_message(*msgs)