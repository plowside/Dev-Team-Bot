# -*- coding: utf- 8 -*-
import asyncio, json, ast

from datetime import datetime
from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from data.config import *
from database import *
from utils.functions import *
from keyboards import *
from .. import main_start

router = Router(name=__name__)






################################################################################
################################### MESSAGE ####################################

# –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
@router.message(F.text == 'üî• –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def create_order(message: Message, bot: Bot, state: FSMContext):
	await state.clear()
	await message.answer('<b>üî• –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b>\n‚îî –£—Å–ª—É–≥–∞: <code>–ù–µ –≤—ã–±—Ä–∞–Ω–∞</code>\n\n<i>‚ô¶Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>', reply_markup=kb_order_choose())

# –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–¥–µ—Ä–∞\–¥–∏–∑–∞–π–Ω–µ—Ä–∞
@router.message(F.text == 'üíº –í—Å—Ç—É–ø–∏—Ç—å –≤ —Å—Ç—É–¥–∏—é')
async def create_application(message: Message, bot: Bot, state: FSMContext):
	await state.clear()
	await message.answer('<b>üíº –í—Å—Ç—É–ø–∏—Ç—å –≤ —Å—Ç—É–¥–∏—é</b>\n‚îî –î–æ–ª–∂–Ω–æ—Å—Ç—å: <code>–ù–µ –≤—ã–±—Ä–∞–Ω–∞</code>\n\n<i>‚ô¶Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</i>—å', reply_markup=kb_application_choose())


@router.callback_query(F.data.startswith('req'))
async def callback_req(call: CallbackQuery, bot: Bot, state: FSMContext, custom_data: str = None):
	cd = custom_data.split(':') if custom_data else call.data.split(':')
	req_type = cd[1]

	if cd[2] == 'chs': # –í—ã–±–æ—Ä –≤–∏–¥–∞ –∑–∞–∫–∞–∑–∞
		req_sub_type = cd[3]
		questions = get_question(req_type, req_sub_type)
		if len(questions) == 0:
			await call.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', show_alert=True)
			return
		# await del_message(call.message)

		answers = {}
		files = {}
		question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'next')
		text = message_tree_construct(req_type, req_sub_type, answers)
		msg = await call.message.edit_text(f'{text}\n\n{question_data.get("user_q", question_key)}', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
		await state.set_state('input_req')

		await state.update_data(req_type=req_type, req_sub_type=req_sub_type, questions=questions, answers=answers, files=files, msgs=[call.message, msg])


@router.message(StateFilter('input_req'))
async def input_req(message: Message, bot: Bot, state: FSMContext):
	tg_user_id, username, firstname = get_user(message)
	mt = message.text
	state_data = await state.get_data()
	
	trns = trns_all.get('morph', {})
	req_type = state_data.get('req_type', None)
	req_sub_type = state_data.get('req_sub_type', None)
	questions = state_data.get('questions', {})
	answers = state_data.get('answers', {})
	files = state_data.get('files', {})
	this_trns = trns.get(req_type, {})
	
	question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'next')
	if mt == '‚Ü™ –ù–∞–∑–∞–¥': # –ù–∞–∑–∞–¥
		question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'this')
		if len(answers) == 0: # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			await del_message(*state_data.get('msgs', []), message)
			return await create_order(message, bot, state) if req_type == 'order' else await create_application(message, bot, state)
		if question_key in answers: del answers[question_key]
	elif question_data and question_data.get('is_file', False) and message.content_type not in ['text']: # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		await state.update_data(answers=answers, files=files)
		file_chat_id, file_message_id = await upload_file(bot, tg_user_id, message.message_id)
		files[question_key] = [*files.get(question_key, []), file_message_id] if question_key in files else [file_message_id]
		msg = await message.reply('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=kb_back('continue', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
		state_data = await state.get_data()
		await state.update_data(msgs=[*state_data.get('msgs', []), message, msg])
		return
	elif not question_key:
		...
	else:
		answers[question_key] = mt

	await del_message(*state_data.get('msgs', []), message)
	question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'next')
	if not question_key:
		text = message_tree_construct(req_type, req_sub_type, answers)
		msg = await message.answer(f'{text}\n\n–°–æ–∑–¥–∞—Ç—å {this_trns.get("l", {}).get("v", "")}?', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
		await state.update_data(answers=answers, msgs=[msg])
		return

	text = message_tree_construct(req_type, req_sub_type, answers)
	msg = await message.answer(f'{text}\n\n{question_data.get("user_q", question_key)}', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
	await state.update_data(answers=answers, msgs=[msg])


@router.callback_query(StateFilter('input_req'))
async def input_req_(call: CallbackQuery, bot: Bot, state: FSMContext):
	tg_user_id, username, firstname = get_user(call)
	cd = call.data.split(':')
	state_data = await state.get_data()

	trns = trns_all.get('morph', {})
	req_type = state_data.get('req_type', None)
	req_sub_type = state_data.get('req_sub_type', None)
	questions = state_data.get('questions', {})
	answers = state_data.get('answers', {})
	files = state_data.get('files', {})
	this_trns = trns.get(req_type, {})

	old_question_key, old_question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'next')

	if cd[0] == 'skip' and old_question_data.get('skipable', False): # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å
		answers[old_question_key] = '–ü—Ä–æ–ø—É—â–µ–Ω–æ'
	elif cd[0] == 'continue' and old_question_data.get('is_file', False): # –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
		await del_message(*state_data.get('msgs', []))
		answers[old_question_key] = files.get(old_question_key, [])
	elif cd[0] == 'back': # –ù–∞–∑–∞–¥
		question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'this')
		if len(answers) == 0: # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			await del_message(*state_data.get('msgs', []), call.message)
			return await create_order(call.message, bot, state) if req_type == 'order' else await create_application(call.message, bot, state)
		if question_key in answers: del answers[question_key]
	elif not old_question_key: # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
		...
	else: # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
		if old_question_data.get('bool', False): answers[old_question_key] = ast.literal_eval(cd[0])
		else: answers[old_question_key] = cd[0]
	
	question_key, question_data, is_first, is_last = get_question(req_type, req_sub_type, answers, 'next')
	this_question_key, this_question_data, this_is_first, this_is_last = get_question(req_type, req_sub_type, answers, 'this')
	if not question_key:
		if (cd[0] == 'skip' and old_question_data.get('skipable', False)) or (cd[0] == 'continue' and old_question_data.get('is_file', False)): # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
			text = message_tree_construct(req_type, req_sub_type, answers)
			msg = await call_msg_answer(call, text=f'{text}\n\n–°–æ–∑–¥–∞—Ç—å {this_trns.get("l", {}).get("v", "")}?', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
			await state.update_data(answers=answers, msgs=[msg])
			return
		else: # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
			await state.clear()
			try: # –û—Ç–º–µ–Ω–∞
				if not ast.literal_eval(cd[0]):
					await call.answer(f'–°–æ–∑–¥–∞–Ω–∏–µ {this_trns.get("l", {}).get("r", "")} –æ—Ç–º–µ–Ω–µ–Ω–æ', show_alert=True)
					return await create_order(call.message, bot, state) if req_type == 'order' else await create_application(call.message, bot, state)
			except:
				text = message_tree_construct(req_type, req_sub_type, answers)
				msg = await call_msg_answer(call, text=f'{text}\n\n–°–æ–∑–¥–∞—Ç—å {this_trns.get("l", {}).get("v", "")}?', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
				await state.update_data(answers=answers, msgs=[msg])
				return
			user = await Userx.get(tg_user_id=tg_user_id)
			request = await Requestx.add(user_id=user.id, req_type=req_type, req_sub_type=req_sub_type, questions_answers=json.dumps(answers))
			text = message_tree_construct(req_type, req_sub_type, answers, h1=False)
			msg = await call_msg_answer(call, text=f'{this_trns.get("u", {}).get("i", "")} —Å–æ–∑–¥–∞–Ω{this_trns.get("end", {}).get("zh", "")}\nID {this_trns.get("u", {}).get("r", "")}: <code>{request.uuid}</code>\n\n<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {this_trns.get("l", {}).get("p", "")}:</b>\n{text}')
			await send_admin(bot, f'<b>–ù–æ–≤{this_trns.get("end", {}).get("n", "")} {this_trns.get("l", {}).get("i", "")}</b>\n‚îú ID {this_trns.get("l", {}).get("i", "")}:  <code>{request.uuid}</code>\n‚îî TG ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  <code>{user.tg_user_id}</code>', reply_markup=kb_back(f'admin:request:s:{request.id}', f'–û—Ç–∫—Ä—ã—Ç—å {this_trns.get("l", {}).get("v", "")}'))
			return
	
	text = message_tree_construct(req_type, req_sub_type, answers)
	msg = await call_msg_answer(call, text=f'{text}\n\n{question_data.get("user_q", question_key)}', reply_markup=kb_multi_state(req_type, req_sub_type, questions, question_key, question_data))
	await state.update_data(answers=answers, files=files, msgs=[msg])










# –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@router.message(F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def faq(message: Message, bot: Bot, state: FSMContext):
	await state.clear()

	await message.answer('<b>üíª KILLA STUDIO ‚Äî –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.</b>\n–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å –≤–∞–∂–Ω–∞, –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç, —É–¥–∏–≤–ª—è—é—Ç –∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É. –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω—É–∂–µ–Ω –ª–∏ –≤–∞–º —Å—Ç–∏–ª—å–Ω—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–∞–π—Ç, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω, –º—ã –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å—Å—è –∑–∞ –ø—Ä–æ–µ–∫—Ç –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.', disable_web_page_preview=True, reply_markup=kb_info())